pragma circom 2.2.2;
include "./circomlib/comparators.circom";


template mock_check {
  signal X_6;
  signal result_m4O;
  signal COND_1;
  signal COND_4;
  signal X5;
  signal X_0_m2O;
  signal result_m2O;
  signal COND_14;
  signal COND_24;
  signal COND_5;
  signal X1;
  signal COND_10;
  signal COND_15;
  signal X4;
  signal input flag;
  signal COND_6;
  signal COND_7;
  signal result_m2;
  signal X_10;
  signal X_0_m2;
  signal OUTPUT__m0;
  signal COND_23;
  signal flagF;
  signal result_m3O;
  signal X_9;
  signal COND_13;
  signal X_0_m4;
  signal COND_18;
  signal X7;
  signal X5F;
  signal COND_28;
  signal input secret;
  signal COND_0;
  signal X_11;
  signal COND_27;
  signal X_0_m3;
  signal COND_8;
  signal COND_21;
  signal COND_19;
  signal result_m4;
  signal X2;
  signal result_m3;
  signal COND_22;
  signal X3;
  signal COND_2;
  signal X_0_m1O;
  signal X1F;
  signal X_0_i;
  signal COND_9;
  signal X6;
  signal X_0_m3O;
  signal X_0_m1;
  signal X8;
  signal X2F;
  signal X_0_i3;
  signal X0;
  signal COND_17;
  signal X_0_m0;
  signal COND_25;
  signal COND_11;
  signal X_0_m4O;
  signal COND_26;
  signal COND_20;
  signal result_m1;
  signal COND_12;
  signal COND_16;
  signal X6F;
  signal OUTPUT__m1O;
  signal result_m0;
  signal OUTPUT__m1;
  signal output OUTPUT_;
  signal X_7;
  signal COND_3;
  OUTPUT__m0 <== 0;
  result_m0 <== 0;
  X_0_m0 <== 0;
  X0 <== flag;
  result_m1 <== secret;
  X_6 <== result_m1;
  X_0_i3 <== X_6 * 3;
  result_m2O <== X_0_i3;
  result_m2 <== (result_m2O - result_m1) * flag + result_m1;
  flagF <== 1 - flag;
  X_7 <== result_m2;
  component X1_EQ = IsEqual();
  X1_EQ.in[0] <== X_7;
  X1_EQ.in[1] <== 900;
  X1 <== X1_EQ.out;
  COND_0 <== flagF * X1;
  X_0_m1O <== 1;
  X_0_m1 <== (X_0_m1O - X_0_m0) * COND_0 + X_0_m0;
  X1F <== 1 - X1;
  COND_1 <== flagF * X1F;
  X_9 <== result_m2;
  X_0_i <== X_9 + 100;
  result_m3O <== X_0_i;
  result_m3 <== (result_m3O - result_m2) * COND_1 + result_m2;
  X_10 <== result_m3;
  component X2_EQ = IsEqual();
  X2_EQ.in[0] <== X_10;
  X2_EQ.in[1] <== 101;
  X2 <== X2_EQ.out;
  COND_2 <== COND_1 * X2;
  result_m4O <== 102;
  result_m4 <== (result_m4O - result_m3) * COND_2 + result_m3;
  X2F <== 1 - X2;
  COND_3 <== COND_1 * X2F;
  COND_4 <== (COND_2 + flag) - (COND_2 * flag);
  COND_5 <== (COND_4 + COND_3) - (COND_4 * COND_3);
  component X5_EQ = IsEqual();
  X5_EQ.in[0] <== secret;
  X5_EQ.in[1] <== 800;
  X5 <== X5_EQ.out;
  COND_6 <== COND_2 * X5;
  COND_7 <== flag * X5;
  COND_8 <== COND_3 * X5;
  COND_9 <== (COND_6 + COND_7) - (COND_6 * COND_7);
  COND_10 <== (COND_9 + COND_8) - (COND_9 * COND_8);
  X_0_m2O <== 1;
  X_0_m2 <== (X_0_m2O - X_0_m1) * COND_10 + X_0_m1;
  X5F <== 1 - X5;
  COND_11 <== COND_2 * X5F;
  COND_12 <== flag * X5F;
  COND_13 <== COND_3 * X5F;
  COND_14 <== (COND_11 + COND_12) - (COND_11 * COND_12);
  COND_15 <== (COND_14 + COND_13) - (COND_14 * COND_13);
  component X6_EQ = IsEqual();
  X6_EQ.in[0] <== secret;
  X6_EQ.in[1] <== 800;
  X6 <== X6_EQ.out;
  COND_16 <== COND_11 * X6;
  COND_17 <== COND_12 * X6;
  COND_18 <== COND_13 * X6;
  COND_19 <== (COND_16 + COND_17) - (COND_16 * COND_17);
  COND_20 <== (COND_19 + COND_18) - (COND_19 * COND_18);
  X_0_m3O <== 0;
  X_0_m3 <== (X_0_m3O - X_0_m2) * COND_20 + X_0_m2;
  X6F <== 1 - X6;
  COND_21 <== COND_11 * X6F;
  COND_22 <== COND_12 * X6F;
  COND_23 <== COND_13 * X6F;
  COND_24 <== (COND_21 + COND_22) - (COND_21 * COND_22);
  COND_25 <== (COND_24 + COND_23) - (COND_24 * COND_23);
  X_11 <== result_m4;
  component X7_EQ = IsEqual();
  X7_EQ.in[0] <== X_11;
  X7_EQ.in[1] <== 102;
  X7 <== X7_EQ.out;
  X8 <== X7;
  X_0_m4O <== X8;
  X_0_m4 <== (X_0_m4O - X_0_m3) * COND_25 + X_0_m3;
  COND_26 <== (COND_20 + COND_25) - (COND_20 * COND_25);
  COND_27 <== (COND_26 + COND_0) - (COND_26 * COND_0);
  COND_28 <== (COND_27 + COND_10) - (COND_27 * COND_10);
  X3 <== X_0_m4;
  X4 <== X3;
  OUTPUT__m1O <== X4;
  OUTPUT__m1 <== (OUTPUT__m1O - OUTPUT__m0) * COND_28 + OUTPUT__m0;
  OUTPUT_ <== OUTPUT__m1;
}


component main = mock_check();