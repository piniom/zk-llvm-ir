pragma circom 2.2.2;
include "./circomlib/comparators.circom";


template advanced_check {
  signal OUTPUT__m1;
  signal result_m2;
  signal flagFX1;
  signal flagFX1FX4_U_flagX4;
  signal output OUTPUT_;
  signal X4F;
  signal result_m3O;
  signal X1F;
  signal X_10;
  signal X_7;
  signal X_0_m3;
  signal X3;
  signal flagFX1F;
  signal X_0_m1;
  signal flagFX1F_U_flag;
  signal X6;
  signal X_0_i;
  signal result_m2O;
  signal OUTPUT__m0;
  signal input secret;
  signal X_0_m2O;
  signal result_m1;
  signal X_0_m0;
  signal X4;
  signal flagFX1FX4;
  signal X5;
  signal X_0_m3O;
  signal X2;
  signal result_m3;
  signal X_0_m2;
  signal result_m0;
  signal flagF;
  signal flagX4;
  signal X_0_i3;
  signal X_6;
  signal X_0_m1O;
  signal flagFX1FX4F;
  signal X_9;
  signal flagX4F;
  signal flagFX1FX4_U_flagX4_U_flagFX1;
  signal input flag;
  signal X0;
  signal flagFX1FX4F_U_flagX4F;
  signal OUTPUT__m1O;
  signal X1;
  signal flagFX1FX4_U_flagX4_U_flagFX1_U_flagFX1FX4F_U_flagX4F;
  OUTPUT__m0 <== 0;
  result_m0 <== 0;
  X_0_m0 <== 0;
  X0 <== flag;
  result_m1 <== secret;
  X_6 <== result_m1;
  X_0_i3 <== X_6 * 3;
  result_m2O <== X_0_i3;
  result_m2 <== (result_m2O - result_m1) * flag + result_m1;
  flagF <== 1 - flag;
  X_7 <== result_m2;
  component X1_EQ = IsEqual();
  X1_EQ.in[0] <== X_7;
  X1_EQ.in[1] <== 900;
  X1 <== X1_EQ.out;
  flagFX1 <== flagF * X1;
  X_0_m1O <== 1;
  X_0_m1 <== (X_0_m1O - X_0_m0) * flagFX1 + X_0_m0;
  X1F <== 1 - X1;
  flagFX1F <== flagF * X1F;
  X_9 <== result_m2;
  X_0_i <== X_9 + 100;
  result_m3O <== X_0_i;
  result_m3 <== (result_m3O - result_m2) * flagFX1F + result_m2;
  flagFX1F_U_flag <== (flagFX1F + flag) - (flagFX1F * flag);
  component X4_EQ = IsEqual();
  X4_EQ.in[0] <== secret;
  X4_EQ.in[1] <== 800;
  X4 <== X4_EQ.out;
  flagFX1FX4 <== flagFX1F * X4;
  flagX4 <== flag * X4;
  flagFX1FX4_U_flagX4 <== (flagFX1FX4 + flagX4) - (flagFX1FX4 * flagX4);
  X_0_m2O <== 1;
  X_0_m2 <== (X_0_m2O - X_0_m1) * flagFX1FX4_U_flagX4 + X_0_m1;
  X4F <== 1 - X4;
  flagFX1FX4F <== flagFX1F * X4F;
  flagX4F <== flag * X4F;
  flagFX1FX4F_U_flagX4F <== (flagFX1FX4F + flagX4F) - (flagFX1FX4F * flagX4F);
  X_10 <== result_m3;
  component X5_EQ = IsEqual();
  X5_EQ.in[0] <== X_10;
  X5_EQ.in[1] <== 102;
  X5 <== X5_EQ.out;
  X6 <== X5;
  X_0_m3O <== X6;
  X_0_m3 <== (X_0_m3O - X_0_m2) * flagFX1FX4F_U_flagX4F + X_0_m2;
  flagFX1FX4_U_flagX4_U_flagFX1 <== (flagFX1FX4_U_flagX4 + flagFX1) - (flagFX1FX4_U_flagX4 * flagFX1);
  flagFX1FX4_U_flagX4_U_flagFX1_U_flagFX1FX4F_U_flagX4F <== (flagFX1FX4_U_flagX4_U_flagFX1 + flagFX1FX4F_U_flagX4F) - (flagFX1FX4_U_flagX4_U_flagFX1 * flagFX1FX4F_U_flagX4F);
  X2 <== X_0_m3;
  X3 <== X2;
  OUTPUT__m1O <== X3;
  OUTPUT__m1 <== (OUTPUT__m1O - OUTPUT__m0) * flagFX1FX4_U_flagX4_U_flagFX1_U_flagFX1FX4F_U_flagX4F + OUTPUT__m0;
  OUTPUT_ <== OUTPUT__m1;
}


component main = advanced_check();