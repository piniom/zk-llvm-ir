pragma circom 2.2.2;
include "./circomlib/comparators.circom";


template advanced_check {
  signal X_0_m0;
  signal input flag;
  signal result_m3O;
  signal X_0_m3;
  signal X_0_m2;
  signal X5;
  signal COND_0;
  signal X2;
  signal OUTPUT__m1O;
  signal COND_5;
  signal COND_1;
  signal result_m2;
  signal COND_4;
  signal input secret;
  signal output OUTPUT_;
  signal X_0_m3O;
  signal X_7;
  signal COND_2;
  signal result_m0;
  signal COND_3;
  signal X_0_i3;
  signal flagF;
  signal COND_7;
  signal COND_8;
  signal result_m1;
  signal X6;
  signal X1F;
  signal COND_9;
  signal COND_10;
  signal result_m2O;
  signal X4F;
  signal X3;
  signal X1;
  signal X0;
  signal X_10;
  signal X_9;
  signal OUTPUT__m1;
  signal X_0_m1;
  signal result_m3;
  signal X_0_i;
  signal X_0_m2O;
  signal OUTPUT__m0;
  signal X_6;
  signal COND_6;
  signal X_0_m1O;
  signal X4;
  OUTPUT__m0 <== 0;
  result_m0 <== 0;
  X_0_m0 <== 0;
  X0 <== flag;
  result_m1 <== secret;
  X_6 <== result_m1;
  X_0_i3 <== X_6 * 3;
  result_m2O <== X_0_i3;
  result_m2 <== (result_m2O - result_m1) * flag + result_m1;
  flagF <== 1 - flag;
  X_7 <== result_m2;
  component X1_EQ = IsEqual();
  X1_EQ.in[0] <== X_7;
  X1_EQ.in[1] <== 900;
  X1 <== X1_EQ.out;
  COND_0 <== flagF * X1;
  X_0_m1O <== 1;
  X_0_m1 <== (X_0_m1O - X_0_m0) * COND_0 + X_0_m0;
  X1F <== 1 - X1;
  COND_1 <== flagF * X1F;
  X_9 <== result_m2;
  X_0_i <== X_9 + 100;
  result_m3O <== X_0_i;
  result_m3 <== (result_m3O - result_m2) * COND_1 + result_m2;
  COND_2 <== (COND_1 + flag) - (COND_1 * flag);
  component X4_EQ = IsEqual();
  X4_EQ.in[0] <== secret;
  X4_EQ.in[1] <== 800;
  X4 <== X4_EQ.out;
  COND_3 <== COND_1 * X4;
  COND_4 <== flag * X4;
  COND_5 <== (COND_3 + COND_4) - (COND_3 * COND_4);
  X_0_m2O <== 1;
  X_0_m2 <== (X_0_m2O - X_0_m1) * COND_5 + X_0_m1;
  X4F <== 1 - X4;
  COND_6 <== COND_1 * X4F;
  COND_7 <== flag * X4F;
  COND_8 <== (COND_6 + COND_7) - (COND_6 * COND_7);
  X_10 <== result_m3;
  component X5_EQ = IsEqual();
  X5_EQ.in[0] <== X_10;
  X5_EQ.in[1] <== 102;
  X5 <== X5_EQ.out;
  X6 <== X5;
  X_0_m3O <== X6;
  X_0_m3 <== (X_0_m3O - X_0_m2) * COND_8 + X_0_m2;
  COND_9 <== (COND_8 + COND_0) - (COND_8 * COND_0);
  COND_10 <== (COND_9 + COND_5) - (COND_9 * COND_5);
  X2 <== X_0_m3;
  X3 <== X2;
  OUTPUT__m1O <== X3;
  OUTPUT__m1 <== (OUTPUT__m1O - OUTPUT__m0) * COND_10 + OUTPUT__m0;
  OUTPUT_ <== OUTPUT__m1;
}


component main = advanced_check();